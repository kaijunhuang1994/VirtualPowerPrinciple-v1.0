Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> database
Rule 1     database -> contents_root
Rule 2     empty -> <empty>
Rule 3     contents_root -> empty
Rule 4     contents_root -> contents_root assign
Rule 5     contents_root -> contents_root COMMENT
Rule 6     contents -> empty
Rule 7     contents -> contents assign
Rule 8     contents -> contents COMMENT
Rule 9     block -> OPEN_CURLY_BRACKET contents CLOSE_CURLY_BRACKET
Rule 10    assign -> VARIABLE EQUALS expr
Rule 11    assign -> VARIABLE EQUALS list
Rule 12    assign -> VARIABLE EQUALS tuple
Rule 13    assign -> VARIABLE EQUALS dictionary
Rule 14    assign -> VARIABLE EQUALS STRING
Rule 15    assign -> VARIABLE EQUALS BOOLEAN
Rule 16    assign -> VARIABLE block
Rule 17    expr -> expr PLUS expr
Rule 18    expr -> expr MINUS expr
Rule 19    expr -> expr TIMES expr
Rule 20    expr -> expr DIVIDE expr
Rule 21    expr -> expr POWER expr
Rule 22    expr -> MINUS expr
Rule 23    expr -> INTEGER
Rule 24    expr -> FLOAT
Rule 25    expr -> VARIABLE
Rule 26    expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS
Rule 27    list -> OPEN_BRACKET CLOSE_BRACKET
Rule 28    list -> OPEN_BRACKET item CLOSE_BRACKET
Rule 29    list -> OPEN_BRACKET items CLOSE_BRACKET
Rule 30    list -> items
Rule 31    tuple -> OPEN_PARENTHESIS items CLOSE_PARENTHESIS
Rule 32    items -> item COMMA items
Rule 33    items -> item COMMA item
Rule 34    item -> expr
Rule 35    item -> tuple
Rule 36    item -> dictionary
Rule 37    item -> BOOLEAN
Rule 38    item -> STRING
Rule 39    dictionary -> OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET
Rule 40    dictionary -> OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET
Rule 41    dictionary_items -> dictionary_item
Rule 42    dictionary_items -> dictionary_item COMMA dictionary_items
Rule 43    dictionary_item -> key COLON item
Rule 44    key -> STRING
Rule 45    key -> INTEGER
Rule 46    key -> FLOAT
Rule 47    key -> BOOLEAN

Terminals, with rules where they appear

BOOLEAN              : 15 37 47
CLOSE_BRACKET        : 27 28 29
CLOSE_CURLY_BRACKET  : 9 39 40
CLOSE_PARENTHESIS    : 26 31
COLON                : 43
COMMA                : 32 33 42
COMMENT              : 5 8
DIVIDE               : 20
EQUALS               : 10 11 12 13 14 15
FLOAT                : 24 46
INTEGER              : 23 45
MINUS                : 18 22
OPEN_BRACKET         : 27 28 29
OPEN_CURLY_BRACKET   : 9 39 40
OPEN_PARENTHESIS     : 26 31
PLUS                 : 17
POWER                : 21
STRING               : 14 38 44
TIMES                : 19
VARIABLE             : 10 11 12 13 14 15 16 25
error                : 

Nonterminals, with rules where they appear

assign               : 4 7
block                : 16
contents             : 7 8 9
contents_root        : 1 4 5
database             : 0
dictionary           : 13 36
dictionary_item      : 41 42
dictionary_items     : 39 42
empty                : 3 6
expr                 : 10 17 17 18 18 19 19 20 20 21 21 22 26 34
item                 : 28 32 33 33 43
items                : 29 30 31 32
key                  : 43
list                 : 11
tuple                : 12 35

Parsing method: LALR

state 0

    (0) S' -> . database
    (1) database -> . contents_root
    (3) contents_root -> . empty
    (4) contents_root -> . contents_root assign
    (5) contents_root -> . contents_root COMMENT
    (2) empty -> .

    COMMENT         reduce using rule 2 (empty -> .)
    VARIABLE        reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    database                       shift and go to state 1
    contents_root                  shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> database .



state 2

    (1) database -> contents_root .
    (4) contents_root -> contents_root . assign
    (5) contents_root -> contents_root . COMMENT
    (10) assign -> . VARIABLE EQUALS expr
    (11) assign -> . VARIABLE EQUALS list
    (12) assign -> . VARIABLE EQUALS tuple
    (13) assign -> . VARIABLE EQUALS dictionary
    (14) assign -> . VARIABLE EQUALS STRING
    (15) assign -> . VARIABLE EQUALS BOOLEAN
    (16) assign -> . VARIABLE block

    $end            reduce using rule 1 (database -> contents_root .)
    COMMENT         shift and go to state 5
    VARIABLE        shift and go to state 6

    assign                         shift and go to state 4

state 3

    (3) contents_root -> empty .

    COMMENT         reduce using rule 3 (contents_root -> empty .)
    VARIABLE        reduce using rule 3 (contents_root -> empty .)
    $end            reduce using rule 3 (contents_root -> empty .)


state 4

    (4) contents_root -> contents_root assign .

    COMMENT         reduce using rule 4 (contents_root -> contents_root assign .)
    VARIABLE        reduce using rule 4 (contents_root -> contents_root assign .)
    $end            reduce using rule 4 (contents_root -> contents_root assign .)


state 5

    (5) contents_root -> contents_root COMMENT .

    COMMENT         reduce using rule 5 (contents_root -> contents_root COMMENT .)
    VARIABLE        reduce using rule 5 (contents_root -> contents_root COMMENT .)
    $end            reduce using rule 5 (contents_root -> contents_root COMMENT .)


state 6

    (10) assign -> VARIABLE . EQUALS expr
    (11) assign -> VARIABLE . EQUALS list
    (12) assign -> VARIABLE . EQUALS tuple
    (13) assign -> VARIABLE . EQUALS dictionary
    (14) assign -> VARIABLE . EQUALS STRING
    (15) assign -> VARIABLE . EQUALS BOOLEAN
    (16) assign -> VARIABLE . block
    (9) block -> . OPEN_CURLY_BRACKET contents CLOSE_CURLY_BRACKET

    EQUALS          shift and go to state 7
    OPEN_CURLY_BRACKET shift and go to state 9

    block                          shift and go to state 8

state 7

    (10) assign -> VARIABLE EQUALS . expr
    (11) assign -> VARIABLE EQUALS . list
    (12) assign -> VARIABLE EQUALS . tuple
    (13) assign -> VARIABLE EQUALS . dictionary
    (14) assign -> VARIABLE EQUALS . STRING
    (15) assign -> VARIABLE EQUALS . BOOLEAN
    (17) expr -> . expr PLUS expr
    (18) expr -> . expr MINUS expr
    (19) expr -> . expr TIMES expr
    (20) expr -> . expr DIVIDE expr
    (21) expr -> . expr POWER expr
    (22) expr -> . MINUS expr
    (23) expr -> . INTEGER
    (24) expr -> . FLOAT
    (25) expr -> . VARIABLE
    (26) expr -> . OPEN_PARENTHESIS expr CLOSE_PARENTHESIS
    (27) list -> . OPEN_BRACKET CLOSE_BRACKET
    (28) list -> . OPEN_BRACKET item CLOSE_BRACKET
    (29) list -> . OPEN_BRACKET items CLOSE_BRACKET
    (30) list -> . items
    (31) tuple -> . OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (39) dictionary -> . OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET
    (40) dictionary -> . OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET
    (32) items -> . item COMMA items
    (33) items -> . item COMMA item
    (34) item -> . expr
    (35) item -> . tuple
    (36) item -> . dictionary
    (37) item -> . BOOLEAN
    (38) item -> . STRING

    STRING          shift and go to state 15
    BOOLEAN         shift and go to state 16
    MINUS           shift and go to state 17
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 19
    VARIABLE        shift and go to state 10
    OPEN_PARENTHESIS shift and go to state 20
    OPEN_BRACKET    shift and go to state 21
    OPEN_CURLY_BRACKET shift and go to state 24

    expr                           shift and go to state 11
    list                           shift and go to state 12
    tuple                          shift and go to state 13
    dictionary                     shift and go to state 14
    item                           shift and go to state 22
    items                          shift and go to state 23

state 8

    (16) assign -> VARIABLE block .

    COMMENT         reduce using rule 16 (assign -> VARIABLE block .)
    VARIABLE        reduce using rule 16 (assign -> VARIABLE block .)
    $end            reduce using rule 16 (assign -> VARIABLE block .)
    CLOSE_CURLY_BRACKET reduce using rule 16 (assign -> VARIABLE block .)


state 9

    (9) block -> OPEN_CURLY_BRACKET . contents CLOSE_CURLY_BRACKET
    (6) contents -> . empty
    (7) contents -> . contents assign
    (8) contents -> . contents COMMENT
    (2) empty -> .

    CLOSE_CURLY_BRACKET reduce using rule 2 (empty -> .)
    COMMENT         reduce using rule 2 (empty -> .)
    VARIABLE        reduce using rule 2 (empty -> .)

    contents                       shift and go to state 25
    empty                          shift and go to state 26

state 10

    (25) expr -> VARIABLE .

    PLUS            reduce using rule 25 (expr -> VARIABLE .)
    MINUS           reduce using rule 25 (expr -> VARIABLE .)
    TIMES           reduce using rule 25 (expr -> VARIABLE .)
    DIVIDE          reduce using rule 25 (expr -> VARIABLE .)
    POWER           reduce using rule 25 (expr -> VARIABLE .)
    COMMENT         reduce using rule 25 (expr -> VARIABLE .)
    VARIABLE        reduce using rule 25 (expr -> VARIABLE .)
    $end            reduce using rule 25 (expr -> VARIABLE .)
    COMMA           reduce using rule 25 (expr -> VARIABLE .)
    CLOSE_CURLY_BRACKET reduce using rule 25 (expr -> VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 25 (expr -> VARIABLE .)
    CLOSE_BRACKET   reduce using rule 25 (expr -> VARIABLE .)


state 11

    (10) assign -> VARIABLE EQUALS expr .
    (17) expr -> expr . PLUS expr
    (18) expr -> expr . MINUS expr
    (19) expr -> expr . TIMES expr
    (20) expr -> expr . DIVIDE expr
    (21) expr -> expr . POWER expr
    (34) item -> expr .

    COMMENT         reduce using rule 10 (assign -> VARIABLE EQUALS expr .)
    VARIABLE        reduce using rule 10 (assign -> VARIABLE EQUALS expr .)
    $end            reduce using rule 10 (assign -> VARIABLE EQUALS expr .)
    CLOSE_CURLY_BRACKET reduce using rule 10 (assign -> VARIABLE EQUALS expr .)
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    TIMES           shift and go to state 29
    DIVIDE          shift and go to state 30
    POWER           shift and go to state 31
    COMMA           reduce using rule 34 (item -> expr .)


state 12

    (11) assign -> VARIABLE EQUALS list .

    COMMENT         reduce using rule 11 (assign -> VARIABLE EQUALS list .)
    VARIABLE        reduce using rule 11 (assign -> VARIABLE EQUALS list .)
    $end            reduce using rule 11 (assign -> VARIABLE EQUALS list .)
    CLOSE_CURLY_BRACKET reduce using rule 11 (assign -> VARIABLE EQUALS list .)


state 13

    (12) assign -> VARIABLE EQUALS tuple .
    (35) item -> tuple .

    COMMENT         reduce using rule 12 (assign -> VARIABLE EQUALS tuple .)
    VARIABLE        reduce using rule 12 (assign -> VARIABLE EQUALS tuple .)
    $end            reduce using rule 12 (assign -> VARIABLE EQUALS tuple .)
    CLOSE_CURLY_BRACKET reduce using rule 12 (assign -> VARIABLE EQUALS tuple .)
    COMMA           reduce using rule 35 (item -> tuple .)


state 14

    (13) assign -> VARIABLE EQUALS dictionary .
    (36) item -> dictionary .

    COMMENT         reduce using rule 13 (assign -> VARIABLE EQUALS dictionary .)
    VARIABLE        reduce using rule 13 (assign -> VARIABLE EQUALS dictionary .)
    $end            reduce using rule 13 (assign -> VARIABLE EQUALS dictionary .)
    CLOSE_CURLY_BRACKET reduce using rule 13 (assign -> VARIABLE EQUALS dictionary .)
    COMMA           reduce using rule 36 (item -> dictionary .)


state 15

    (14) assign -> VARIABLE EQUALS STRING .
    (38) item -> STRING .

    COMMENT         reduce using rule 14 (assign -> VARIABLE EQUALS STRING .)
    VARIABLE        reduce using rule 14 (assign -> VARIABLE EQUALS STRING .)
    $end            reduce using rule 14 (assign -> VARIABLE EQUALS STRING .)
    CLOSE_CURLY_BRACKET reduce using rule 14 (assign -> VARIABLE EQUALS STRING .)
    COMMA           reduce using rule 38 (item -> STRING .)


state 16

    (15) assign -> VARIABLE EQUALS BOOLEAN .
    (37) item -> BOOLEAN .

    COMMENT         reduce using rule 15 (assign -> VARIABLE EQUALS BOOLEAN .)
    VARIABLE        reduce using rule 15 (assign -> VARIABLE EQUALS BOOLEAN .)
    $end            reduce using rule 15 (assign -> VARIABLE EQUALS BOOLEAN .)
    CLOSE_CURLY_BRACKET reduce using rule 15 (assign -> VARIABLE EQUALS BOOLEAN .)
    COMMA           reduce using rule 37 (item -> BOOLEAN .)


state 17

    (22) expr -> MINUS . expr
    (17) expr -> . expr PLUS expr
    (18) expr -> . expr MINUS expr
    (19) expr -> . expr TIMES expr
    (20) expr -> . expr DIVIDE expr
    (21) expr -> . expr POWER expr
    (22) expr -> . MINUS expr
    (23) expr -> . INTEGER
    (24) expr -> . FLOAT
    (25) expr -> . VARIABLE
    (26) expr -> . OPEN_PARENTHESIS expr CLOSE_PARENTHESIS

    MINUS           shift and go to state 17
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 19
    VARIABLE        shift and go to state 10
    OPEN_PARENTHESIS shift and go to state 33

    expr                           shift and go to state 32

state 18

    (23) expr -> INTEGER .

    PLUS            reduce using rule 23 (expr -> INTEGER .)
    MINUS           reduce using rule 23 (expr -> INTEGER .)
    TIMES           reduce using rule 23 (expr -> INTEGER .)
    DIVIDE          reduce using rule 23 (expr -> INTEGER .)
    POWER           reduce using rule 23 (expr -> INTEGER .)
    COMMENT         reduce using rule 23 (expr -> INTEGER .)
    VARIABLE        reduce using rule 23 (expr -> INTEGER .)
    $end            reduce using rule 23 (expr -> INTEGER .)
    COMMA           reduce using rule 23 (expr -> INTEGER .)
    CLOSE_CURLY_BRACKET reduce using rule 23 (expr -> INTEGER .)
    CLOSE_PARENTHESIS reduce using rule 23 (expr -> INTEGER .)
    CLOSE_BRACKET   reduce using rule 23 (expr -> INTEGER .)


state 19

    (24) expr -> FLOAT .

    PLUS            reduce using rule 24 (expr -> FLOAT .)
    MINUS           reduce using rule 24 (expr -> FLOAT .)
    TIMES           reduce using rule 24 (expr -> FLOAT .)
    DIVIDE          reduce using rule 24 (expr -> FLOAT .)
    POWER           reduce using rule 24 (expr -> FLOAT .)
    COMMENT         reduce using rule 24 (expr -> FLOAT .)
    VARIABLE        reduce using rule 24 (expr -> FLOAT .)
    $end            reduce using rule 24 (expr -> FLOAT .)
    COMMA           reduce using rule 24 (expr -> FLOAT .)
    CLOSE_CURLY_BRACKET reduce using rule 24 (expr -> FLOAT .)
    CLOSE_PARENTHESIS reduce using rule 24 (expr -> FLOAT .)
    CLOSE_BRACKET   reduce using rule 24 (expr -> FLOAT .)


state 20

    (26) expr -> OPEN_PARENTHESIS . expr CLOSE_PARENTHESIS
    (31) tuple -> OPEN_PARENTHESIS . items CLOSE_PARENTHESIS
    (17) expr -> . expr PLUS expr
    (18) expr -> . expr MINUS expr
    (19) expr -> . expr TIMES expr
    (20) expr -> . expr DIVIDE expr
    (21) expr -> . expr POWER expr
    (22) expr -> . MINUS expr
    (23) expr -> . INTEGER
    (24) expr -> . FLOAT
    (25) expr -> . VARIABLE
    (26) expr -> . OPEN_PARENTHESIS expr CLOSE_PARENTHESIS
    (32) items -> . item COMMA items
    (33) items -> . item COMMA item
    (34) item -> . expr
    (35) item -> . tuple
    (36) item -> . dictionary
    (37) item -> . BOOLEAN
    (38) item -> . STRING
    (31) tuple -> . OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (39) dictionary -> . OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET
    (40) dictionary -> . OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET

    MINUS           shift and go to state 17
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 19
    VARIABLE        shift and go to state 10
    OPEN_PARENTHESIS shift and go to state 20
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 39
    OPEN_CURLY_BRACKET shift and go to state 24

    expr                           shift and go to state 34
    items                          shift and go to state 35
    item                           shift and go to state 22
    tuple                          shift and go to state 36
    dictionary                     shift and go to state 37

state 21

    (27) list -> OPEN_BRACKET . CLOSE_BRACKET
    (28) list -> OPEN_BRACKET . item CLOSE_BRACKET
    (29) list -> OPEN_BRACKET . items CLOSE_BRACKET
    (34) item -> . expr
    (35) item -> . tuple
    (36) item -> . dictionary
    (37) item -> . BOOLEAN
    (38) item -> . STRING
    (32) items -> . item COMMA items
    (33) items -> . item COMMA item
    (17) expr -> . expr PLUS expr
    (18) expr -> . expr MINUS expr
    (19) expr -> . expr TIMES expr
    (20) expr -> . expr DIVIDE expr
    (21) expr -> . expr POWER expr
    (22) expr -> . MINUS expr
    (23) expr -> . INTEGER
    (24) expr -> . FLOAT
    (25) expr -> . VARIABLE
    (26) expr -> . OPEN_PARENTHESIS expr CLOSE_PARENTHESIS
    (31) tuple -> . OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (39) dictionary -> . OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET
    (40) dictionary -> . OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET

    CLOSE_BRACKET   shift and go to state 40
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 39
    MINUS           shift and go to state 17
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 19
    VARIABLE        shift and go to state 10
    OPEN_PARENTHESIS shift and go to state 20
    OPEN_CURLY_BRACKET shift and go to state 24

    item                           shift and go to state 41
    items                          shift and go to state 42
    expr                           shift and go to state 43
    tuple                          shift and go to state 36
    dictionary                     shift and go to state 37

state 22

    (32) items -> item . COMMA items
    (33) items -> item . COMMA item

    COMMA           shift and go to state 44


state 23

    (30) list -> items .

    COMMENT         reduce using rule 30 (list -> items .)
    VARIABLE        reduce using rule 30 (list -> items .)
    $end            reduce using rule 30 (list -> items .)
    CLOSE_CURLY_BRACKET reduce using rule 30 (list -> items .)


state 24

    (39) dictionary -> OPEN_CURLY_BRACKET . dictionary_items CLOSE_CURLY_BRACKET
    (40) dictionary -> OPEN_CURLY_BRACKET . CLOSE_CURLY_BRACKET
    (41) dictionary_items -> . dictionary_item
    (42) dictionary_items -> . dictionary_item COMMA dictionary_items
    (43) dictionary_item -> . key COLON item
    (44) key -> . STRING
    (45) key -> . INTEGER
    (46) key -> . FLOAT
    (47) key -> . BOOLEAN

    CLOSE_CURLY_BRACKET shift and go to state 46
    STRING          shift and go to state 49
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 51
    BOOLEAN         shift and go to state 52

    dictionary_items               shift and go to state 45
    dictionary_item                shift and go to state 47
    key                            shift and go to state 48

state 25

    (9) block -> OPEN_CURLY_BRACKET contents . CLOSE_CURLY_BRACKET
    (7) contents -> contents . assign
    (8) contents -> contents . COMMENT
    (10) assign -> . VARIABLE EQUALS expr
    (11) assign -> . VARIABLE EQUALS list
    (12) assign -> . VARIABLE EQUALS tuple
    (13) assign -> . VARIABLE EQUALS dictionary
    (14) assign -> . VARIABLE EQUALS STRING
    (15) assign -> . VARIABLE EQUALS BOOLEAN
    (16) assign -> . VARIABLE block

    CLOSE_CURLY_BRACKET shift and go to state 53
    COMMENT         shift and go to state 55
    VARIABLE        shift and go to state 6

    assign                         shift and go to state 54

state 26

    (6) contents -> empty .

    CLOSE_CURLY_BRACKET reduce using rule 6 (contents -> empty .)
    COMMENT         reduce using rule 6 (contents -> empty .)
    VARIABLE        reduce using rule 6 (contents -> empty .)


state 27

    (17) expr -> expr PLUS . expr
    (17) expr -> . expr PLUS expr
    (18) expr -> . expr MINUS expr
    (19) expr -> . expr TIMES expr
    (20) expr -> . expr DIVIDE expr
    (21) expr -> . expr POWER expr
    (22) expr -> . MINUS expr
    (23) expr -> . INTEGER
    (24) expr -> . FLOAT
    (25) expr -> . VARIABLE
    (26) expr -> . OPEN_PARENTHESIS expr CLOSE_PARENTHESIS

    MINUS           shift and go to state 17
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 19
    VARIABLE        shift and go to state 10
    OPEN_PARENTHESIS shift and go to state 33

    expr                           shift and go to state 56

state 28

    (18) expr -> expr MINUS . expr
    (17) expr -> . expr PLUS expr
    (18) expr -> . expr MINUS expr
    (19) expr -> . expr TIMES expr
    (20) expr -> . expr DIVIDE expr
    (21) expr -> . expr POWER expr
    (22) expr -> . MINUS expr
    (23) expr -> . INTEGER
    (24) expr -> . FLOAT
    (25) expr -> . VARIABLE
    (26) expr -> . OPEN_PARENTHESIS expr CLOSE_PARENTHESIS

    MINUS           shift and go to state 17
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 19
    VARIABLE        shift and go to state 10
    OPEN_PARENTHESIS shift and go to state 33

    expr                           shift and go to state 57

state 29

    (19) expr -> expr TIMES . expr
    (17) expr -> . expr PLUS expr
    (18) expr -> . expr MINUS expr
    (19) expr -> . expr TIMES expr
    (20) expr -> . expr DIVIDE expr
    (21) expr -> . expr POWER expr
    (22) expr -> . MINUS expr
    (23) expr -> . INTEGER
    (24) expr -> . FLOAT
    (25) expr -> . VARIABLE
    (26) expr -> . OPEN_PARENTHESIS expr CLOSE_PARENTHESIS

    MINUS           shift and go to state 17
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 19
    VARIABLE        shift and go to state 10
    OPEN_PARENTHESIS shift and go to state 33

    expr                           shift and go to state 58

state 30

    (20) expr -> expr DIVIDE . expr
    (17) expr -> . expr PLUS expr
    (18) expr -> . expr MINUS expr
    (19) expr -> . expr TIMES expr
    (20) expr -> . expr DIVIDE expr
    (21) expr -> . expr POWER expr
    (22) expr -> . MINUS expr
    (23) expr -> . INTEGER
    (24) expr -> . FLOAT
    (25) expr -> . VARIABLE
    (26) expr -> . OPEN_PARENTHESIS expr CLOSE_PARENTHESIS

    MINUS           shift and go to state 17
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 19
    VARIABLE        shift and go to state 10
    OPEN_PARENTHESIS shift and go to state 33

    expr                           shift and go to state 59

state 31

    (21) expr -> expr POWER . expr
    (17) expr -> . expr PLUS expr
    (18) expr -> . expr MINUS expr
    (19) expr -> . expr TIMES expr
    (20) expr -> . expr DIVIDE expr
    (21) expr -> . expr POWER expr
    (22) expr -> . MINUS expr
    (23) expr -> . INTEGER
    (24) expr -> . FLOAT
    (25) expr -> . VARIABLE
    (26) expr -> . OPEN_PARENTHESIS expr CLOSE_PARENTHESIS

    MINUS           shift and go to state 17
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 19
    VARIABLE        shift and go to state 10
    OPEN_PARENTHESIS shift and go to state 33

    expr                           shift and go to state 60

state 32

    (22) expr -> MINUS expr .
    (17) expr -> expr . PLUS expr
    (18) expr -> expr . MINUS expr
    (19) expr -> expr . TIMES expr
    (20) expr -> expr . DIVIDE expr
    (21) expr -> expr . POWER expr

    PLUS            reduce using rule 22 (expr -> MINUS expr .)
    MINUS           reduce using rule 22 (expr -> MINUS expr .)
    TIMES           reduce using rule 22 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 22 (expr -> MINUS expr .)
    POWER           reduce using rule 22 (expr -> MINUS expr .)
    COMMENT         reduce using rule 22 (expr -> MINUS expr .)
    VARIABLE        reduce using rule 22 (expr -> MINUS expr .)
    $end            reduce using rule 22 (expr -> MINUS expr .)
    COMMA           reduce using rule 22 (expr -> MINUS expr .)
    CLOSE_CURLY_BRACKET reduce using rule 22 (expr -> MINUS expr .)
    CLOSE_PARENTHESIS reduce using rule 22 (expr -> MINUS expr .)
    CLOSE_BRACKET   reduce using rule 22 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! TIMES           [ shift and go to state 29 ]
  ! DIVIDE          [ shift and go to state 30 ]
  ! POWER           [ shift and go to state 31 ]


state 33

    (26) expr -> OPEN_PARENTHESIS . expr CLOSE_PARENTHESIS
    (17) expr -> . expr PLUS expr
    (18) expr -> . expr MINUS expr
    (19) expr -> . expr TIMES expr
    (20) expr -> . expr DIVIDE expr
    (21) expr -> . expr POWER expr
    (22) expr -> . MINUS expr
    (23) expr -> . INTEGER
    (24) expr -> . FLOAT
    (25) expr -> . VARIABLE
    (26) expr -> . OPEN_PARENTHESIS expr CLOSE_PARENTHESIS

    MINUS           shift and go to state 17
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 19
    VARIABLE        shift and go to state 10
    OPEN_PARENTHESIS shift and go to state 33

    expr                           shift and go to state 61

state 34

    (26) expr -> OPEN_PARENTHESIS expr . CLOSE_PARENTHESIS
    (17) expr -> expr . PLUS expr
    (18) expr -> expr . MINUS expr
    (19) expr -> expr . TIMES expr
    (20) expr -> expr . DIVIDE expr
    (21) expr -> expr . POWER expr
    (34) item -> expr .

    CLOSE_PARENTHESIS shift and go to state 62
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    TIMES           shift and go to state 29
    DIVIDE          shift and go to state 30
    POWER           shift and go to state 31
    COMMA           reduce using rule 34 (item -> expr .)


state 35

    (31) tuple -> OPEN_PARENTHESIS items . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 63


state 36

    (35) item -> tuple .

    COMMA           reduce using rule 35 (item -> tuple .)
    CLOSE_BRACKET   reduce using rule 35 (item -> tuple .)
    COMMENT         reduce using rule 35 (item -> tuple .)
    VARIABLE        reduce using rule 35 (item -> tuple .)
    $end            reduce using rule 35 (item -> tuple .)
    CLOSE_CURLY_BRACKET reduce using rule 35 (item -> tuple .)
    CLOSE_PARENTHESIS reduce using rule 35 (item -> tuple .)


state 37

    (36) item -> dictionary .

    COMMA           reduce using rule 36 (item -> dictionary .)
    CLOSE_BRACKET   reduce using rule 36 (item -> dictionary .)
    COMMENT         reduce using rule 36 (item -> dictionary .)
    VARIABLE        reduce using rule 36 (item -> dictionary .)
    $end            reduce using rule 36 (item -> dictionary .)
    CLOSE_CURLY_BRACKET reduce using rule 36 (item -> dictionary .)
    CLOSE_PARENTHESIS reduce using rule 36 (item -> dictionary .)


state 38

    (37) item -> BOOLEAN .

    COMMA           reduce using rule 37 (item -> BOOLEAN .)
    CLOSE_BRACKET   reduce using rule 37 (item -> BOOLEAN .)
    COMMENT         reduce using rule 37 (item -> BOOLEAN .)
    VARIABLE        reduce using rule 37 (item -> BOOLEAN .)
    $end            reduce using rule 37 (item -> BOOLEAN .)
    CLOSE_CURLY_BRACKET reduce using rule 37 (item -> BOOLEAN .)
    CLOSE_PARENTHESIS reduce using rule 37 (item -> BOOLEAN .)


state 39

    (38) item -> STRING .

    COMMA           reduce using rule 38 (item -> STRING .)
    CLOSE_BRACKET   reduce using rule 38 (item -> STRING .)
    COMMENT         reduce using rule 38 (item -> STRING .)
    VARIABLE        reduce using rule 38 (item -> STRING .)
    $end            reduce using rule 38 (item -> STRING .)
    CLOSE_CURLY_BRACKET reduce using rule 38 (item -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 38 (item -> STRING .)


state 40

    (27) list -> OPEN_BRACKET CLOSE_BRACKET .

    COMMENT         reduce using rule 27 (list -> OPEN_BRACKET CLOSE_BRACKET .)
    VARIABLE        reduce using rule 27 (list -> OPEN_BRACKET CLOSE_BRACKET .)
    $end            reduce using rule 27 (list -> OPEN_BRACKET CLOSE_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 27 (list -> OPEN_BRACKET CLOSE_BRACKET .)


state 41

    (28) list -> OPEN_BRACKET item . CLOSE_BRACKET
    (32) items -> item . COMMA items
    (33) items -> item . COMMA item

    CLOSE_BRACKET   shift and go to state 64
    COMMA           shift and go to state 44


state 42

    (29) list -> OPEN_BRACKET items . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 65


state 43

    (34) item -> expr .
    (17) expr -> expr . PLUS expr
    (18) expr -> expr . MINUS expr
    (19) expr -> expr . TIMES expr
    (20) expr -> expr . DIVIDE expr
    (21) expr -> expr . POWER expr

    CLOSE_BRACKET   reduce using rule 34 (item -> expr .)
    COMMA           reduce using rule 34 (item -> expr .)
    COMMENT         reduce using rule 34 (item -> expr .)
    VARIABLE        reduce using rule 34 (item -> expr .)
    $end            reduce using rule 34 (item -> expr .)
    CLOSE_CURLY_BRACKET reduce using rule 34 (item -> expr .)
    CLOSE_PARENTHESIS reduce using rule 34 (item -> expr .)
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    TIMES           shift and go to state 29
    DIVIDE          shift and go to state 30
    POWER           shift and go to state 31


state 44

    (32) items -> item COMMA . items
    (33) items -> item COMMA . item
    (32) items -> . item COMMA items
    (33) items -> . item COMMA item
    (34) item -> . expr
    (35) item -> . tuple
    (36) item -> . dictionary
    (37) item -> . BOOLEAN
    (38) item -> . STRING
    (17) expr -> . expr PLUS expr
    (18) expr -> . expr MINUS expr
    (19) expr -> . expr TIMES expr
    (20) expr -> . expr DIVIDE expr
    (21) expr -> . expr POWER expr
    (22) expr -> . MINUS expr
    (23) expr -> . INTEGER
    (24) expr -> . FLOAT
    (25) expr -> . VARIABLE
    (26) expr -> . OPEN_PARENTHESIS expr CLOSE_PARENTHESIS
    (31) tuple -> . OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (39) dictionary -> . OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET
    (40) dictionary -> . OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET

    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 39
    MINUS           shift and go to state 17
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 19
    VARIABLE        shift and go to state 10
    OPEN_PARENTHESIS shift and go to state 20
    OPEN_CURLY_BRACKET shift and go to state 24

    item                           shift and go to state 66
    items                          shift and go to state 67
    expr                           shift and go to state 43
    tuple                          shift and go to state 36
    dictionary                     shift and go to state 37

state 45

    (39) dictionary -> OPEN_CURLY_BRACKET dictionary_items . CLOSE_CURLY_BRACKET

    CLOSE_CURLY_BRACKET shift and go to state 68


state 46

    (40) dictionary -> OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET .

    COMMENT         reduce using rule 40 (dictionary -> OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 40 (dictionary -> OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET .)
    $end            reduce using rule 40 (dictionary -> OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET .)
    COMMA           reduce using rule 40 (dictionary -> OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 40 (dictionary -> OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET .)
    CLOSE_BRACKET   reduce using rule 40 (dictionary -> OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET .)
    CLOSE_PARENTHESIS reduce using rule 40 (dictionary -> OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET .)


state 47

    (41) dictionary_items -> dictionary_item .
    (42) dictionary_items -> dictionary_item . COMMA dictionary_items

    CLOSE_CURLY_BRACKET reduce using rule 41 (dictionary_items -> dictionary_item .)
    COMMA           shift and go to state 69


state 48

    (43) dictionary_item -> key . COLON item

    COLON           shift and go to state 70


state 49

    (44) key -> STRING .

    COLON           reduce using rule 44 (key -> STRING .)


state 50

    (45) key -> INTEGER .

    COLON           reduce using rule 45 (key -> INTEGER .)


state 51

    (46) key -> FLOAT .

    COLON           reduce using rule 46 (key -> FLOAT .)


state 52

    (47) key -> BOOLEAN .

    COLON           reduce using rule 47 (key -> BOOLEAN .)


state 53

    (9) block -> OPEN_CURLY_BRACKET contents CLOSE_CURLY_BRACKET .

    COMMENT         reduce using rule 9 (block -> OPEN_CURLY_BRACKET contents CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 9 (block -> OPEN_CURLY_BRACKET contents CLOSE_CURLY_BRACKET .)
    $end            reduce using rule 9 (block -> OPEN_CURLY_BRACKET contents CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 9 (block -> OPEN_CURLY_BRACKET contents CLOSE_CURLY_BRACKET .)


state 54

    (7) contents -> contents assign .

    CLOSE_CURLY_BRACKET reduce using rule 7 (contents -> contents assign .)
    COMMENT         reduce using rule 7 (contents -> contents assign .)
    VARIABLE        reduce using rule 7 (contents -> contents assign .)


state 55

    (8) contents -> contents COMMENT .

    CLOSE_CURLY_BRACKET reduce using rule 8 (contents -> contents COMMENT .)
    COMMENT         reduce using rule 8 (contents -> contents COMMENT .)
    VARIABLE        reduce using rule 8 (contents -> contents COMMENT .)


state 56

    (17) expr -> expr PLUS expr .
    (17) expr -> expr . PLUS expr
    (18) expr -> expr . MINUS expr
    (19) expr -> expr . TIMES expr
    (20) expr -> expr . DIVIDE expr
    (21) expr -> expr . POWER expr

    PLUS            reduce using rule 17 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 17 (expr -> expr PLUS expr .)
    COMMENT         reduce using rule 17 (expr -> expr PLUS expr .)
    VARIABLE        reduce using rule 17 (expr -> expr PLUS expr .)
    $end            reduce using rule 17 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 17 (expr -> expr PLUS expr .)
    CLOSE_CURLY_BRACKET reduce using rule 17 (expr -> expr PLUS expr .)
    CLOSE_PARENTHESIS reduce using rule 17 (expr -> expr PLUS expr .)
    CLOSE_BRACKET   reduce using rule 17 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 29
    DIVIDE          shift and go to state 30
    POWER           shift and go to state 31

  ! TIMES           [ reduce using rule 17 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 17 (expr -> expr PLUS expr .) ]
  ! POWER           [ reduce using rule 17 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]


state 57

    (18) expr -> expr MINUS expr .
    (17) expr -> expr . PLUS expr
    (18) expr -> expr . MINUS expr
    (19) expr -> expr . TIMES expr
    (20) expr -> expr . DIVIDE expr
    (21) expr -> expr . POWER expr

    PLUS            reduce using rule 18 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 18 (expr -> expr MINUS expr .)
    COMMENT         reduce using rule 18 (expr -> expr MINUS expr .)
    VARIABLE        reduce using rule 18 (expr -> expr MINUS expr .)
    $end            reduce using rule 18 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 18 (expr -> expr MINUS expr .)
    CLOSE_CURLY_BRACKET reduce using rule 18 (expr -> expr MINUS expr .)
    CLOSE_PARENTHESIS reduce using rule 18 (expr -> expr MINUS expr .)
    CLOSE_BRACKET   reduce using rule 18 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 29
    DIVIDE          shift and go to state 30
    POWER           shift and go to state 31

  ! TIMES           [ reduce using rule 18 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr MINUS expr .) ]
  ! POWER           [ reduce using rule 18 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]


state 58

    (19) expr -> expr TIMES expr .
    (17) expr -> expr . PLUS expr
    (18) expr -> expr . MINUS expr
    (19) expr -> expr . TIMES expr
    (20) expr -> expr . DIVIDE expr
    (21) expr -> expr . POWER expr

    PLUS            reduce using rule 19 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 19 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 19 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 19 (expr -> expr TIMES expr .)
    COMMENT         reduce using rule 19 (expr -> expr TIMES expr .)
    VARIABLE        reduce using rule 19 (expr -> expr TIMES expr .)
    $end            reduce using rule 19 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 19 (expr -> expr TIMES expr .)
    CLOSE_CURLY_BRACKET reduce using rule 19 (expr -> expr TIMES expr .)
    CLOSE_PARENTHESIS reduce using rule 19 (expr -> expr TIMES expr .)
    CLOSE_BRACKET   reduce using rule 19 (expr -> expr TIMES expr .)
    POWER           shift and go to state 31

  ! POWER           [ reduce using rule 19 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! TIMES           [ shift and go to state 29 ]
  ! DIVIDE          [ shift and go to state 30 ]


state 59

    (20) expr -> expr DIVIDE expr .
    (17) expr -> expr . PLUS expr
    (18) expr -> expr . MINUS expr
    (19) expr -> expr . TIMES expr
    (20) expr -> expr . DIVIDE expr
    (21) expr -> expr . POWER expr

    PLUS            reduce using rule 20 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 20 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 20 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 20 (expr -> expr DIVIDE expr .)
    COMMENT         reduce using rule 20 (expr -> expr DIVIDE expr .)
    VARIABLE        reduce using rule 20 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 20 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 20 (expr -> expr DIVIDE expr .)
    CLOSE_CURLY_BRACKET reduce using rule 20 (expr -> expr DIVIDE expr .)
    CLOSE_PARENTHESIS reduce using rule 20 (expr -> expr DIVIDE expr .)
    CLOSE_BRACKET   reduce using rule 20 (expr -> expr DIVIDE expr .)
    POWER           shift and go to state 31

  ! POWER           [ reduce using rule 20 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! TIMES           [ shift and go to state 29 ]
  ! DIVIDE          [ shift and go to state 30 ]


state 60

    (21) expr -> expr POWER expr .
    (17) expr -> expr . PLUS expr
    (18) expr -> expr . MINUS expr
    (19) expr -> expr . TIMES expr
    (20) expr -> expr . DIVIDE expr
    (21) expr -> expr . POWER expr

    PLUS            reduce using rule 21 (expr -> expr POWER expr .)
    MINUS           reduce using rule 21 (expr -> expr POWER expr .)
    TIMES           reduce using rule 21 (expr -> expr POWER expr .)
    DIVIDE          reduce using rule 21 (expr -> expr POWER expr .)
    POWER           reduce using rule 21 (expr -> expr POWER expr .)
    COMMENT         reduce using rule 21 (expr -> expr POWER expr .)
    VARIABLE        reduce using rule 21 (expr -> expr POWER expr .)
    $end            reduce using rule 21 (expr -> expr POWER expr .)
    COMMA           reduce using rule 21 (expr -> expr POWER expr .)
    CLOSE_CURLY_BRACKET reduce using rule 21 (expr -> expr POWER expr .)
    CLOSE_PARENTHESIS reduce using rule 21 (expr -> expr POWER expr .)
    CLOSE_BRACKET   reduce using rule 21 (expr -> expr POWER expr .)

  ! PLUS            [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]
  ! TIMES           [ shift and go to state 29 ]
  ! DIVIDE          [ shift and go to state 30 ]
  ! POWER           [ shift and go to state 31 ]


state 61

    (26) expr -> OPEN_PARENTHESIS expr . CLOSE_PARENTHESIS
    (17) expr -> expr . PLUS expr
    (18) expr -> expr . MINUS expr
    (19) expr -> expr . TIMES expr
    (20) expr -> expr . DIVIDE expr
    (21) expr -> expr . POWER expr

    CLOSE_PARENTHESIS shift and go to state 62
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    TIMES           shift and go to state 29
    DIVIDE          shift and go to state 30
    POWER           shift and go to state 31


state 62

    (26) expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .

    PLUS            reduce using rule 26 (expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .)
    MINUS           reduce using rule 26 (expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .)
    TIMES           reduce using rule 26 (expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .)
    DIVIDE          reduce using rule 26 (expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .)
    POWER           reduce using rule 26 (expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .)
    COMMENT         reduce using rule 26 (expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .)
    VARIABLE        reduce using rule 26 (expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .)
    $end            reduce using rule 26 (expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 26 (expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .)
    CLOSE_CURLY_BRACKET reduce using rule 26 (expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 26 (expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 26 (expr -> OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .)


state 63

    (31) tuple -> OPEN_PARENTHESIS items CLOSE_PARENTHESIS .

    COMMENT         reduce using rule 31 (tuple -> OPEN_PARENTHESIS items CLOSE_PARENTHESIS .)
    VARIABLE        reduce using rule 31 (tuple -> OPEN_PARENTHESIS items CLOSE_PARENTHESIS .)
    $end            reduce using rule 31 (tuple -> OPEN_PARENTHESIS items CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 31 (tuple -> OPEN_PARENTHESIS items CLOSE_PARENTHESIS .)
    CLOSE_CURLY_BRACKET reduce using rule 31 (tuple -> OPEN_PARENTHESIS items CLOSE_PARENTHESIS .)
    CLOSE_BRACKET   reduce using rule 31 (tuple -> OPEN_PARENTHESIS items CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 31 (tuple -> OPEN_PARENTHESIS items CLOSE_PARENTHESIS .)


state 64

    (28) list -> OPEN_BRACKET item CLOSE_BRACKET .

    COMMENT         reduce using rule 28 (list -> OPEN_BRACKET item CLOSE_BRACKET .)
    VARIABLE        reduce using rule 28 (list -> OPEN_BRACKET item CLOSE_BRACKET .)
    $end            reduce using rule 28 (list -> OPEN_BRACKET item CLOSE_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 28 (list -> OPEN_BRACKET item CLOSE_BRACKET .)


state 65

    (29) list -> OPEN_BRACKET items CLOSE_BRACKET .

    COMMENT         reduce using rule 29 (list -> OPEN_BRACKET items CLOSE_BRACKET .)
    VARIABLE        reduce using rule 29 (list -> OPEN_BRACKET items CLOSE_BRACKET .)
    $end            reduce using rule 29 (list -> OPEN_BRACKET items CLOSE_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 29 (list -> OPEN_BRACKET items CLOSE_BRACKET .)


state 66

    (33) items -> item COMMA item .
    (32) items -> item . COMMA items
    (33) items -> item . COMMA item

    COMMENT         reduce using rule 33 (items -> item COMMA item .)
    VARIABLE        reduce using rule 33 (items -> item COMMA item .)
    $end            reduce using rule 33 (items -> item COMMA item .)
    CLOSE_CURLY_BRACKET reduce using rule 33 (items -> item COMMA item .)
    CLOSE_PARENTHESIS reduce using rule 33 (items -> item COMMA item .)
    CLOSE_BRACKET   reduce using rule 33 (items -> item COMMA item .)
    COMMA           shift and go to state 44


state 67

    (32) items -> item COMMA items .

    COMMENT         reduce using rule 32 (items -> item COMMA items .)
    VARIABLE        reduce using rule 32 (items -> item COMMA items .)
    $end            reduce using rule 32 (items -> item COMMA items .)
    CLOSE_CURLY_BRACKET reduce using rule 32 (items -> item COMMA items .)
    CLOSE_PARENTHESIS reduce using rule 32 (items -> item COMMA items .)
    CLOSE_BRACKET   reduce using rule 32 (items -> item COMMA items .)


state 68

    (39) dictionary -> OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET .

    COMMENT         reduce using rule 39 (dictionary -> OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 39 (dictionary -> OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET .)
    $end            reduce using rule 39 (dictionary -> OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET .)
    COMMA           reduce using rule 39 (dictionary -> OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 39 (dictionary -> OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET .)
    CLOSE_BRACKET   reduce using rule 39 (dictionary -> OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET .)
    CLOSE_PARENTHESIS reduce using rule 39 (dictionary -> OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET .)


state 69

    (42) dictionary_items -> dictionary_item COMMA . dictionary_items
    (41) dictionary_items -> . dictionary_item
    (42) dictionary_items -> . dictionary_item COMMA dictionary_items
    (43) dictionary_item -> . key COLON item
    (44) key -> . STRING
    (45) key -> . INTEGER
    (46) key -> . FLOAT
    (47) key -> . BOOLEAN

    STRING          shift and go to state 49
    INTEGER         shift and go to state 50
    FLOAT           shift and go to state 51
    BOOLEAN         shift and go to state 52

    dictionary_item                shift and go to state 47
    dictionary_items               shift and go to state 71
    key                            shift and go to state 48

state 70

    (43) dictionary_item -> key COLON . item
    (34) item -> . expr
    (35) item -> . tuple
    (36) item -> . dictionary
    (37) item -> . BOOLEAN
    (38) item -> . STRING
    (17) expr -> . expr PLUS expr
    (18) expr -> . expr MINUS expr
    (19) expr -> . expr TIMES expr
    (20) expr -> . expr DIVIDE expr
    (21) expr -> . expr POWER expr
    (22) expr -> . MINUS expr
    (23) expr -> . INTEGER
    (24) expr -> . FLOAT
    (25) expr -> . VARIABLE
    (26) expr -> . OPEN_PARENTHESIS expr CLOSE_PARENTHESIS
    (31) tuple -> . OPEN_PARENTHESIS items CLOSE_PARENTHESIS
    (39) dictionary -> . OPEN_CURLY_BRACKET dictionary_items CLOSE_CURLY_BRACKET
    (40) dictionary -> . OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET

    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 39
    MINUS           shift and go to state 17
    INTEGER         shift and go to state 18
    FLOAT           shift and go to state 19
    VARIABLE        shift and go to state 10
    OPEN_PARENTHESIS shift and go to state 20
    OPEN_CURLY_BRACKET shift and go to state 24

    item                           shift and go to state 72
    expr                           shift and go to state 43
    tuple                          shift and go to state 36
    dictionary                     shift and go to state 37

state 71

    (42) dictionary_items -> dictionary_item COMMA dictionary_items .

    CLOSE_CURLY_BRACKET reduce using rule 42 (dictionary_items -> dictionary_item COMMA dictionary_items .)


state 72

    (43) dictionary_item -> key COLON item .

    COMMA           reduce using rule 43 (dictionary_item -> key COLON item .)
    CLOSE_CURLY_BRACKET reduce using rule 43 (dictionary_item -> key COLON item .)

